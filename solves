
1.
return x*3;
2.
return parseInt(x);
3.
return (6*(x*x)).toFixed(4);
4.
return x%2==0?false:true;
5.
return Math.sqrt(x);

6.
return x.toString();

7.x is a string that contains a number,return x as a number
return parseFloat(x);

8.x is the length of the cube's sides,return the surface area of the cube, round the result to 4 digits

    return parseFloat(roundToFour(6*(x*x)));
    function roundToFour(num) {
        return +(Math.round(num + "e+4")  + "e-4");
    }

9.x is an arbitrarily nested, multidimensional array.return x flattened (all items in 1 dimension)

    return flatten(x);
    function flatten(arr) {
        return arr.reduce(function (flat, toFlatten) {
            return flat.concat(Array.isArray(toFlatten) ? flatten(toFlatten) : toFlatten);
        }, []);
    }

10.x is an array of at least 2 unique elements
 return the elements that are on odd positions in the array

return x.filter(function(el, ind){
    return ind % 2 === 0;
});

11.x is an array of numbers. Return elements on the array, where the value is equal to their index doubled.
return x.filter(function(el, ind){
    return el == ind*2;
});

12.x is a date in 2019 as string (example: "06/30/2019")
return the rank of the day in 2019 (i.e. "09/01/2019" translates to 244)


    Date.prototype.isLeapYear = function() {
        var year = this.getFullYear();
        if((year & 3) != 0) return false;
        return ((year % 100) != 0 || (year % 400) == 0);
    };
    let getDOY = function(x) {
        let date=new Date(x);
        var dayCount = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
        var mn = date.getMonth();
        var dn = date.getDate();
        var dayOfYear = dayCount[mn] + dn;
        if(mn > 1 && date.isLeapYear()) dayOfYear++;
        return dayOfYear;
    };
    return getDOY(x);


13. x is a string. rearrange the string from the last to the first character

return x.split("").reverse().join("");



14.x is an array,return an array removing the first 3 elements on x

let x=[1,2,3,4,5];
x.shift()
x.shift()
x.shift()
return x;

15.x is a string (representing a file name),return the file extension (everything after the last dot)

let temp= (/[.]/.exec(x)) ? /[^.]+$/.exec(x) : undefined;
    if(temp==undefined){
        return "";
    }else{
        return temp[0];
    }

16. x is radius of a sphere,return the volume of the sphere, round the result to 4 digits

return roundToFour((4 / 3) * Math.PI * Math.pow(x, 3))

 function roundToFour(num) {
        return +(Math.round(num + "e+4")  + "e-4");
    }



 17.longest string in array:

  return x.sort(function (a, b){
        return b.length - a.length;
    })[0]

18.x is a string. Cut x in half and move the second half to the beginning,'1234' will become '3412', '12345' will become '34512'

 return x.substr(x.length/2) + x.substr(0, x.length/2);


 19. x is a string. return true if every char in the string is an english vowel

 let result=true;
    for(let char of x){
        if(!isVowel(char)){
            result=false;
            break;
        }
    }
    return result;
    function isVowel(c) {
        return ['a', 'e', 'i', 'o', 'u'].indexOf(c.toLowerCase()) !== -1
    }



20. x is a string using kebab-case or snake_case,return the same string using camelCase

 if(x.includes('-')){
        return camelize(x,'k')
    }else{
        return camelize(x,'s')
    }


    function camelize(str,type){
        let arr;
        if(type=="k"){
           arr = str.split('-');
        }else if(type=="s"){
            arr = str.split('_');
        }
        let capital = arr.map((item, index) => index ? item.charAt(0).toUpperCase() + item.slice(1).toLowerCase() : item.toLowerCase());
        // ^-- change here.
        let capitalString = capital.join("");
        return capitalString;
    }




21.x is a string. turn lowercase letters to uppercase and vice versa.

   return x.split('')
        .map((c) =>
            c === c.toUpperCase()
                ? c.toLowerCase()
                : c.toUpperCase()
        ).join('')




22  x is a string. Make each first letter of each space-separated word uppercase. example: "this is a string" -> "This Is A String"

        return x.split(' ').map(w=>w[0].toUpperCase()+w.slice(1,w.length)).join(' ')

23.x is a string. return whether its parentheses are balanced,that is, whether every opening ( has a closing )

        return areQuotesAndParenthesesBalanced(x.toString());

           function areQuotesAndParenthesesBalanced(s){
               var pairs = {
                   '}':'{',
                   ']':'[',
                   ')':'(',
               };

               var stack = [];

               for(var i = 0;i < s.length;++i){
                   switch(s.charAt(i)){
                       case '[': case '{':case '(':
                           stack.push(s.charAt(i));
                           break;
                       case ']': case '}':case ')':
                           if(isStackEmpty(stack) || peek(stack) !== pairs[s.charAt(i)]) return false;
                           stack.pop();
                           break;
                       case '"':
                           if(isStackEmpty(stack) || peek(stack) !== s.charAt(i)){
                               stack.push(s.charAt(i));
                           }else{
                               stack.pop();
                           }
                   }
               }

               return isStackEmpty(stack);
           }

           function isStackEmpty(s){
               return s.length === 0;
           }
           function peek(s){
               return s[s.length-1];
           }

24.x is an array of at least 1 item.return the most frequent item (there will always be just one).


     return mode(x);
        function mode(array)
        {
            if(array.length == 0)
                return null;
            var modeMap = {};
            var maxEl = array[0], maxCount = 1;
            for(var i = 0; i < array.length; i++)
            {
                var el = array[i];
                if(modeMap[el] == null)
                    modeMap[el] = 1;
                else
                    modeMap[el]++;
                if(modeMap[el] > maxCount)
                {
                    maxEl = el;
                    maxCount = modeMap[el];
                }
            }
            return maxEl;
        }


25.
primeFactors(x) x is an integer return an array of all its prime factors Example: if x=12 then return [2,2,3]

return prime_factors(x)
    function prime_factors(num) {
        function is_prime(num) {
            for (let i = 2; i <= Math.sqrt(num); i++)
            {
                if (num % i === 0) return false;
            }
            return true;
        }
        const result = [];
        for (let i = 2; i <= num; i++)
        {
            while (is_prime(i) && num % i === 0)
            {
                // if (!result.includes(i))
                result.push(i);
                num /= i;
            }
        }
        return result;
    }

26.

box.sortingType = function sortingType (x)
    // x is an array of at least 2 unique members
    // return 0 if it's not sorted, 1 if it's ascending, -1 if it's descending


    var array = x;

    var isDescending = true;
    var isAscending = true;

    for (var i = 0, l = array.length - 1; i < l; i++) {


        isDescending = isDescending && (array[i] > array[i + 1]);

        isAscending = isAscending && (array[i] < array[i + 1]);

    }

    if (isAscending) {
        return 1
    } else if (isDescending) {
        return -1
    } else {
        return 0;
    }


    27.
box.hasBalancePoint = function hasBalancePoint (x) x is an array of numbers. return whether there is an index where
 before (excluding) it is equal to the sum after (including) it.


    return solution(x);
    function solution(A) {
        var rightSum = A.reduce((acc, val) => acc + val, 0), leftSum = 0;

        for (var i = 0; i < A.length; i++) {

            rightSum -= A[i];
            if (rightSum === leftSum) return true;

            leftSum += A[i];
        }

        return false;
    }




box.occurrenceCheck = function occurrenceCheck(x) {
    // A string is valid if all characters of the string appear the same number of times.
    // It is also valid if it were valid after removing just 1 character from it.
    // Given a string x, determine if it is valid.




    // Example: aabbcc => true
    // Example: aabbbcc => true
    // Example: aabbbccc => false
    // Example: aabbbbcc => false
};